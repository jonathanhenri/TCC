<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

	<bean id="appProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:application.properties</value>
		</property>
		<property name="systemPropertiesModeName">
			<value>SYSTEM_PROPERTIES_MODE_OVERRIDE</value>
		</property>
	</bean>
	
	
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="initialSize">
			<value>${pool.initialSize}</value>
		</property>
		<property name="maxActive">
			<value>${pool.maxActive}</value>
		</property>
		<property name="defaultAutoCommit">
			<value>${pool.defaultAutoCommit}</value>
		</property>
		<property name="maxWait">
			<value>${pool.maxWait}</value>
		</property>
		<property name="testWhileIdle">
			<value>${pool.testWhileIdle}</value>
		</property>
		
		<!--
		<property name="maxIdle">
			<value>${pool.maxIdle}</value>
		</property>
		<property name="testOnBorrow">
			<value>${pool.testOnBorrow}</value>
		</property>
		<property name="testOnReturn">
			<value>${pool.testOnReturn}</value>
		</property>
		<property name="validationQuery">
			<value>${pool.validationQuery}</value>
		</property>
		<property name="timeBetweenEvictionRunsMillis">
			<value>${pool.timeBetweenEvictionRunsMillis}</value>
		</property>
		-->

		<!-- 
		
		<property name="maxIdle">
			<value>${dbcp.maxIdle}</value>
		</property>
		<property name="minIdle">
			<value>${dbcp.minIdle}</value>
		</property>
		<property name="removeAbandoned">
			<value>${dbcp.removeAbandoned}</value>
		</property>
		<property name="removeAbandonedTimeout">
			<value>${dbcp.removeAbandonedTimeout}</value>
		</property>
		<property name="logAbandoned">
			<value>${dbcp.logAbandoned}</value>
		</property>
		<property name="poolPreparedStatements">
			<value>${dbcp.poolPreparedStatements}</value>
		</property>
		<property name="maxOpenPreparedStatements">
			<value>${dbcp.maxOpenPreparedStatements}</value>
		</property>
		
		 -->
	</bean>
	
	<bean name="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
        p:dataSource-ref="dataSource">
		<property name="hibernateProperties">
			<props>
<!--   				<prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.pool_size">20</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.cglib.use_reflection_optimizer">true</prop>
            	<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
            	<prop key="hibernate.hibernate.cache.use_query_cache">true</prop>
            	<prop key="hibernate.generate_statistics">false</prop>
            	<prop key="hibernate.jdbc.batch_size">50</prop>
            	<prop key="hibernate.connection.isolation">2</prop>
            	
			</props>
		</property>
        <property name="mappingLocations">
            <list>
            </list>
        </property>
		<property name="packagesToScan" value="com.mycompany.domain"/>
    </bean>
    
	<!--
		Transação no datasource para funcionar com ACEGI, Hibernate e JBPM
	-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<context:component-scan base-package="com.mycompany.domain" />
	
	<!-- <context:component-scan base-package="br.com.controlese.web.rest" /> -->
	<!-- 
	<bean id="lookupStrategy" class="org.springframework.security.acls.jdbc.BasicLookupStrategy">
		<constructor-arg ref="dataSource" />
		<constructor-arg ref="aclCache" />
		<constructor-arg ref="aclAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.springframework.security.acls.domain.ConsoleAuditLogger" />
		</constructor-arg>
	</bean>-->

	<bean id="aclCache" class="org.springframework.security.acls.jdbc.EhCacheBasedAclCache">
		<constructor-arg>
			<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
				<property name="cacheManager">
					<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
				</property>
				<property name="cacheName" value="aclCache" />
			</bean>
		</constructor-arg>
	</bean>
<!-- 
	<bean id="aclAuthorizationStrategy" class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.GrantedAuthorityImpl">
					<constructor-arg value="ROLE_ADMIN" />
				</bean>
				<bean class="org.springframework.security.GrantedAuthorityImpl">
					<constructor-arg value="ROLE_ADMIN" />
				</bean>
				<bean class="org.springframework.security.GrantedAuthorityImpl">
					<constructor-arg value="ROLE_ADMIN" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	 -->
	 
	<!-- setup wicket application -->
	<bean id="wicketApplication" class="com.mycompany.WicketApplication">
	</bean>
	
	<bean id="filterChainProxy" class="org.springframework.security.util.FilterChainProxy"> 
        <property name="filterInvocationDefinitionSource"> 
            <value> 
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON 
                PATTERN_TYPE_APACHE_ANT 
                /**=httpSessionContextIntegrationFilter 
            </value> 
        </property> 
    </bean>
    
    <bean id="httpSessionContextIntegrationFilter"  class="org.springframework.security.context.HttpSessionContextIntegrationFilter"> 
        <property name="allowSessionCreation" value="false"/> 
    </bean>
	
	<bean id="dataGenerator" class="com.mycompany.dataGenerator.DataGenerator">
		<property name="alunoDAO" ref="alunoDAO" />
		<property name="cursoDAO" ref="cursoDAO" />
		<property name="permissaoAcessoDAO" ref="permissaoAcessoDAO" />
		<property name="perfilAcessoDAO" ref="perfilAcessoDAO" />
	</bean>
	
</beans>
